@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.Owin

<h1>Welcome, @(User.Identity.Name ?? "Guest")!</h1>
<h3>Your Claims:</h3>
<ul>
    @{
        var claimsPrincipal = User as ClaimsPrincipal;
        if (claimsPrincipal != null)
        {
            foreach (Claim claim in claimsPrincipal.Claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        }
    }
</ul>

<h3>Access Token:</h3>
<ul>
    @{
        // 세션에서 액세스 토큰 가져오기
        var accessToken = HttpContext.Current.Session["access_token"] as string;

        if (!string.IsNullOrEmpty(accessToken))
        {
            <li>Access Token: @accessToken</li>

            // JWT 토큰 디코딩 및 Claims 추출
            var jwtHandler = new JwtSecurityTokenHandler();
            if (jwtHandler.CanReadToken(accessToken))
            {
                var jwtToken = jwtHandler.ReadJwtToken(accessToken);

                // 필요한 특정 Claims만 출력
                <li>JWT Claims:</li>
                foreach (var claim in jwtToken.Claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            }
            else
            {
                <li>Invalid JWT Token</li>
            }
        }
        else
        {
            <li>No Access Token found</li>
        }
    }

</ul>

<a href="/Home/Logout">Logout</a>

<script>
    fetch('/api/resource', {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + '@accessToken'
        }
    })
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(error => console.error('Error:', error));
</script>
